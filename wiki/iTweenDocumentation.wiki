#summary Online documentation for iTween.

=Start an iTween:=
<p>
iTween.moveTo(gameObject,1,1,1,1,0,"easeInOutQuint");
</p>
<br><br>
=Management Methods:=
<p>
*stop*(obj: GameObject) : void
<ul>
<li>Stops and destroys all iTweens for the supplied GameObject.</li>
</ul>
</p>
<p>
*getTweenCount*(obj: GameObject) : int
<ul>
<li>Returns an integer of the total iTweens running on the supplied GameObject.</li>
</ul>
</p>
<br><br>
=Movement Methods:=
<p>
*punchPosition*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float) : void
<ul>
<li>Applies a jolt of force on the given access and springs the GameObject back to its original position like a punching bag.</li>
<li>Negative/positive values dictate the direction of the applies force.</li>
</ul>
</p>
<br><br>
<p>
*moveTo*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float, easing: String) : void 
<ul>
<li>Moves the GameObject to the supplied coordinates.</li>
</ul>
</p>
<br><br>
<p>
*moveFrom*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float, easing: String) : void
<ul>
<li>Moves the GameObject from the supplied coordinates</li>
</ul>
</p>
<br><br>
<p>
*fadeTo*(obj: GameObject,endA: float,duration: float,delay: float) : void
<ul>
<li>Fades the material of the GameObject to the supplied alpha.</li>
<li>Only works if the GameObject's material calculates transparency.</li>
</ul>
</p>
<br><br>
<p>
*fadeFrom*(obj: GameObject,endA: float,duration: float,delay: float) : void
<ul>
<li>Fades the material of the GameObject from the supplied alpha.</li>
<li>Only works if the GameObject's material calculates transparency.</li>
</ul>
</p>
<br><br>
<p>
*rotateTo*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float, easing: String) : void
<ul>
<li>Rotates the GameObject to the supplied degrees.</li>
<li>Rotation direction is automatically decided based on shortest travel time.</li>
<li>Does not apply to GUITextures.</li>
</ul>
</p>
<br><br>
<p>
*rotateFrom*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float, easing: String) : void
<ul>
<li>Rotates the GameObject from the supplied degrees.</li>
<li>Rotation direction is automatically decided based on shortest travel time.</li>
<li>Does not apply to GUITextures.</li>
</ul>
</p>
<br><br>
<p>
*rotateBy*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float, easing: String) : void
<ul>
<li>Rotates the GameObject 360 degrees times the supplied multiplier.</li>
<li>Negative/positive values dictate direction of rotation.</li>
<li>Does not apply to GUITextures.</li>
</ul>
</p>
<br><br>
<p>
*shake*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float) : void
<ul>
<li>Randomly shakes the GameObject on each axis by the supplied magnitude.</li>
<li>Negative/positive values dictate direction of initial impact.</li>
</ul>
</p>
<br><br>
<p>
*stab*(obj: GameObject,sound: AudioSource,volume: float,pitch: float,delay: float) : void
<ul>
<li>Plays an audio clip one time based on supplied volume and pitch.</li>
</ul>
</p>
<br><br>
<p>
*scaleTo*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float, easing: String) : void
<ul>
<li>Scales the GameObject to the supplied coordinates.</li>
</ul>
</p>
<br><br>
<p>
*scaleFrom*(obj: GameObject,x: float,y: float,z: float,duration: float,delay: float, easing: String) : void
<ul>
<li>Scales the GameObject from the supplied coordinates.</li>
</ul>
</p>
<br><br>
=Easing Curves:=

linear
spring
bounce
easeInQuad
easeOutQuad
easeInOutQuad
easeInCubic
easeOutCubic
easeInOutCubic
easeInQuart
easeOutQuart
easeInOutQuart
easeInQuint
easeOutQuint
easeInOutQuint
easeInSine
easeOutSine
easeInOutSine
easeInExpo
easeOutExpo
easeInOutExpo
easeInCirc
easeOutCirc
easeInOutCirc
easeInBack
easeOutBack
easeInOutBack